#!/bin/sh
#
# Print message tag
TAG="[   Initramfs]"
# Mount procfs if not ready
test -r /proc/mounts
#if [ $? -eq 0 ]; then
#	grep -q proc /proc/mounts
#fi
if [ $? -ne 0 ]; then
	mount -t proc proc /proc
fi
# Mount devtmpfs if not ready
grep -q devtmpfs /proc/mounts
if [ $? -ne 0 ]; then
	mount -t devtmpfs devtmpfs /dev
fi

# Mount sysfs if not ready
# Note: ubiattach required sysfs to run
grep -q sysfs /proc/mounts
if [ $? -ne 0 ]; then
	mount -t sysfs sysfs /sys
fi

# Setup stdio
exec 0</dev/console
exec 1>/dev/console
exec 2>/dev/console
#ls /
#ls /proc
#ls /dev
# Parsing kernel cmdline
CMDLINE=`cat /proc/cmdline`
ROOT_DEV=
ROOT_OPT=
ROOT_FST=
OVERLAYROOT=
OVERLAYROOT_DEV=
OVERLAYROOT_OPT=
OVERLAYROOT_FST=
MISC_MTD=/dev/mtd4
MISC_MTD_NUM=4
MISC_UBI=/dev/ubi0
MISC_UBI_VOL=/dev/ubi0_0
CACHE_MTD=/dev/mtd5
CACHE_MTD_NUM=5
CACHE_UBI=/dev/ubi1
CACHE_UBI_VOL=/dev/ubi1_0
MOUNT_OPTS=
for V in ${CMDLINE}; do
	case $V in
		root=*)
			ROOT_DEV=`echo $V | cut -d= -f2`
			;;
		ro)
			ROOT_OPT=ro
			;;
		rw)
			ROOT_OPT=rw
			;;
		rootfstype=*)
			ROOT_FST=`echo $V | cut -d= -f2`
			;;
		originroot=*)
			ORIGINROOT=$V
			ORIGINROOT_DEV=`echo $V | cut -d: -f1`
			ORIGINROOT_OPT=`echo $V | cut -d: -f2`
			ORIGINROOT_FST=`echo $V | cut -d: -f3`
			;;
		overlayroot=*)
			OVERLAYROOT=`echo $V | cut -d= -f2`
			OVERLAYROOT_DEV=`echo $OVERLAYROOT | cut -d: -f1`
			OVERLAYROOT_OPT=`echo $OVERLAYROOT | cut -d: -f2`
			OVERLAYROOT_FST=`echo $OVERLAYROOT | cut -d: -f3`
			;;
		*);;
	esac
done

# Check misc parts
check_misc_parts()
{
	echo "${TAG} UBI attaching misc part ...";
	ubiattach -d 0 -m ${MISC_MTD_NUM}
	if [ $? -ne 0 ]; then
		echo "${TAG} UBI attach misc part failed, fix now ..."
		flash_erase ${MISC_MTD} 0 0 2&>1 > /dev/null
		ubiformat ${MISC_MTD} -q -y
		if [ $? -ne 0 ]; then
			echo "${TAG} UBI format misc part failed."
			return 1
		fi
		echo "${TAG} UBI attaching misc part again ...";
		ubiattach -d 0 -m ${MISC_MTD_NUM}
	fi
	# Check ubi volume with ubinfo
	ubinfo ${MISC_UBI_VOL} 2&>1 > /dev/null
	if [ $? -ne 0 ]; then
		echo "${TAG} UBI misc volume not exists, fix now ..."
		ubimkvol ${MISC_UBI} -N misc -m 2&>1 > /dev/null
		if [ $? -ne 0 ]; then
			echo "${TAG} UBI misc volume create failed."
			return 1
		fi
	fi
}

# Check the factory-reset mark file and do reset if needed.
factory_reset_if_marked()
{
	mkdir -p /misc
	mount -t ubifs ${MISC_UBI_VOL} /misc 2&>1 > /dev/null
	if [ $? -eq 0 ]; then
		if [ -f /misc/factory-reset -a -f /misc/factory-reset.hash ]; then
			md5sum -c /misc/factory-reset.hash 2&>1 > /dev/null
			if [ $? -eq 0 ]; then
				echo "${TAG} Factory reset requested, wipe the cache part now ..."
				ubiformat ${CACHE_MTD} -q -y
			fi
			rm -f /misc/factory-reset
			rm -f /misc/factory-reset.hash
			sync
		fi
		umount /misc 2&>1 > /dev/null
	fi
}

# Check cache parts
check_cache_parts()
{
	echo "${TAG} UBI attaching cache part ...";
	ubiattach -d 1 -m ${CACHE_MTD_NUM}
	if [ $? -ne 0 ]; then
		echo "${TAG} UBI attach cache part failed, fix now ..."
		flash_erase ${CACHE_MTD} 0 0 2&>1 > /dev/null
		ubiformat ${CACHE_MTD} -q -y
		if [ $? -ne 0 ]; then
			echo "${TAG} UBI format cache part failed."
			return 1
		fi
		echo "${TAG} UBI attaching cache part again ...";
		ubiattach -d 1 -m ${CACHE_MTD_NUM}
	fi
	# Check ubi volume with ubinfo
	ubinfo ${CACHE_UBI_VOL} 2&>1 > /dev/null
	if [ $? -ne 0 ]; then
		echo "${TAG} UBI cache volume not exists, fix now ..."
		ubimkvol ${CACHE_UBI} -N cache -m 2&>1 > /dev/null
		if [ $? -ne 0 ]; then
			echo "${TAG} UBI cache volume create failed."
			return 1
		fi
	fi
}

# Enter system with initramfs
enter_initramfs_only()
{
	echo "${TAG} Entery initramfs only."
	umount /proc
	exec /sbin/init $*
}
# Enter system with original rootfs 
enter_origin_rootfs()
{
	echo "${TAG} Rootfs on ${ROOT_DEV}"
	# Check device
	test -b ${ROOT_DEV}
	if [ $? -ne 0 ]; then
		echo "${TAG} Rootfs device ${ROOT_DEV} does not exists."
		export BOOT_ERROR=ERARDNF
		enter_initramfs_only $*
	fi
	# Check settigns
	if [ -z "${ROOT_OPT}" ]; then
		ROOT_OPT=ro
	fi
	if [ -n "${ROOT_OPT}" ]; then
		MOUNT_OPTS="${MOUNT_OPTS} -o ${ROOT_OPT}"
	fi
	if [ -n "${ROOT_FST}" ]; then
		MOUNT_OPTS="${MOUNT_OPTS} -t ${ROOT_FST}"
	fi
	# Make symblos
	ln -s ${ROOT_DEV} /dev/root
	# Mount origin rootfs
	mkdir -p /system
	mount ${MOUNT_OPTS} ${ROOT_DEV} /system
	umount /proc
	exec switch_root -c /dev/console /system /sbin/init $*
	enter_initramfs_only $*
}
# Enter system with overlayfs
enter_overlayfs()
{
	rv=0
	echo "${TAG} Origin rootfs on ${ROOT_DEV},${ROOT_OPT},${ROOT_FST}"
	echo "${TAG} Overlay rootfs on ${OVERLAYROOT_DEV},${OVERLAYROOT_OPT},${OVERLAYROOT_FST}"
	test -b ${ROOT_DEV}
	if [ $? -ne 0 ]; then
		echo "${TAG} Origin rootfs device ${ROOT_DEV} does not exists."
		export BOOT_ERROR=EORRDNF
		enter_initramfs_only $*
	fi
	case ${OVERLAYROOT_DEV} in
		*ubi*)
			ubinfo ${OVERLAYROOT_DEV} 2&>1 > /dev/null
			rv=$?
			;;
		*)
			test -b ${OVERLAYROOT_DEV}
			rv=$?
			;;
	esac
	if [ ${rv} -ne 0 ]; then
		echo "rv = ${rv}"
		echo "${TAG} Overlay rootfs device ${OVERLAYROOT_DEV} does not exists."
		export BOOT_ERROR=EOVRDNF
		enter_initramfs_only $*
	fi
	# Check settings
	if [ -z "${ROOT_OPT}" ]; then
		ROOT_OPT=ro
	fi
	if [ -z "${ROOT_FST}" ]; then
		ROOT_FST=squashfs
	fi
	if [ -z "${OVERLAYROOT_OPT}" ]; then
		OVERLAYROOT_OPT=rw
	fi
	if [ -z "${OVERLAYROOT_FST}" ]; then
		OVERLAYROOT_FST=ubifs
	fi
	# Make dev symbols
	ln -s ${ROOT_DEV} /dev/root-origin
	ln -s ${OVERLAYROOT_DEV} /dev/root-overlay
	# Mount origin rootfs
	MOUNT_OPTS=
	if [ -n "${ROOT_OPT}" ]; then
		MOUNT_OPTS="${MOUNT_OPTS} -o ${ROOT_OPT}"
	fi
	if [ -n "${ROOT_FST}" ]; then
		MOUNT_OPTS="${MOUNT_OPTS} -t ${ROOT_FST}"
	fi
	mkdir -p /system-origin
	mount ${MOUNT_OPTS} ${ROOT_DEV} /system-origin 2&>1 > /dev/null
	if [ $? -ne 0 ]; then
		echo "${TAG} Mount origin rootfs failed."
		export BOOT_ERROR=EMNORRD
		enter_initramfs_only $*
	fi
	# Mout overlay rootfs
	MOUNT_OPTS=
	if [ -n "${OVERLAYROOT_OPT}" ]; then
		MOUNT_OPTS="${MOUNT_OPTS} -o ${OVERLAYROOT_OPT}"
	fi
	if [ -n "${OVERLAYROOT_FST}" ]; then
		MOUNT_OPTS="${MOUNT_OPTS} -t ${OVERLAYROOT_FST}"
	fi
	mkdir -p /system-overlay
	mount ${MOUNT_OPTS} ${OVERLAYROOT_DEV} /system-overlay 2&>1 > /dev/null
	if [ $? -ne 0 ]; then
		echo "${TAG} Mount overlay rootfs failed."
		export BOOT_ERROR=EMNOVRD
		enter_initramfs_only $*
	fi
	# Mout overlayfs
	mkdir -p /system
	mount -t overlayfs overlayfs -o exec,lowerdir=/system-origin,upperdir=/system-overlay /system 2&>1 > /dev/null
	if [ $? -ne 0 ]; then
		echo "${TAG} Mount overlayfs failed."
		export BOOT_ERROR=EMNOVFS
		enter_initramfs_only $*
	fi
	umount /proc
	umount /sys
	umount -l /dev
	exec /sbin/switch_root -c /dev/console /system /sbin/init $*
	enter_initramfs_only $*
}
# Cheking writable parts
check_misc_parts
# Factory reset must be before cache part check
factory_reset_if_marked
check_cache_parts
# If root setted, ans not /dev/ram0
if [ -n "${ROOT_DEV}" -a "${ROOT_DEV}" != "/dev/ram0" ]; then
	# if overlayroot setted, use overlayfs mode
	if [ -n "${OVERLAYROOT}" ]; then
		enter_overlayfs $*
	else
		enter_origin_rootfs $*
	fi
fi
# Otherwise, just enter the initramfs
enter_initramfs_only $*
exit $?
